import streamlit as st
import plotly.express as px
import pandas as pd

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(
    page_title="AnÃ¡lise de Pedidos",
    page_icon="ğŸ“Š",
    layout="wide"
)

# TÃ­tulo principal
st.title("ğŸ“Š Dashboard de AnÃ¡lise de Pedidos")

# Upload do arquivo
st.sidebar.header("ConfiguraÃ§Ãµes")
uploaded_file = st.sidebar.file_uploader("FaÃ§a upload do seu arquivo Excel", type=['xlsx', 'xls'])

# DefiniÃ§Ã£o das colunas esperadas
COLUNAS_ESPERADAS = [
    "id_pedido", "data", "loja", "cidade", "estado", 
    "regiao", "tamanho", "local_consumo", "preco",
    "forma_pagamento", "ano_mes"
]

if uploaded_file is not None:
    try:
        # Leitura dos dados do Excel
        dados = pd.read_excel(uploaded_file)
        
        # Verifica se todas as colunas necessÃ¡rias estÃ£o presentes
        colunas_faltantes = [col for col in COLUNAS_ESPERADAS if col not in dados.columns]
        
        if colunas_faltantes:
            st.error(f"As seguintes colunas estÃ£o faltando no arquivo: {', '.join(colunas_faltantes)}")
        else:
            # PreparaÃ§Ã£o dos dados - Criando uma cÃ³pia explÃ­cita do DataFrame
            dados = dados.copy()
            dados['data'] = pd.to_datetime(dados['data'])
            
            # Sidebar - Filtros
            st.sidebar.header("Filtros")
            
            # Filtro de perÃ­odo
            min_date = dados['data'].min()
            max_date = dados['data'].max()
            start_date, end_date = st.sidebar.date_input(
                "Selecione o perÃ­odo",
                value=(min_date, max_date),
                min_value=min_date,
                max_value=max_date
            )
            
            # Filtro de regiÃ£o
            regioes = ['Todas'] + sorted(dados['regiao'].unique().tolist())
            regiao_selecionada = st.sidebar.selectbox('Selecione a RegiÃ£o', regioes)
            
            # Aplicar filtros - Criando uma nova cÃ³pia do DataFrame
            mask = (dados['data'].dt.date >= start_date) & (dados['data'].dt.date <= end_date)
            if regiao_selecionada != 'Todas':
                mask = mask & (dados['regiao'] == regiao_selecionada)
            
            dados_filtrados = dados.loc[mask].copy()
            
            # MÃ©tricas principais
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total de Pedidos", f"{len(dados_filtrados):,}")
            with col2:
                st.metric("Faturamento Total", f"R$ {dados_filtrados['preco'].sum():,.2f}")
            with col3:
                st.metric("Ticket MÃ©dio", f"R$ {dados_filtrados['preco'].mean():,.2f}")
            with col4:
                st.metric("NÂº de Lojas", f"{dados_filtrados['loja'].nunique():,}")
            
            # GrÃ¡ficos
            st.header("AnÃ¡lise de Vendas")
            
            # Lista de anÃ¡lises disponÃ­veis
            colunas_analise = ["loja", "cidade", "estado", "regiao", "tamanho", 
                             "local_consumo", "forma_pagamento"]
            
            # Tabs para diferentes visualizaÃ§Ãµes
            tab1, tab2, tab3 = st.tabs(["AnÃ¡lise por Categoria", "AnÃ¡lise Temporal", "AnÃ¡lise Detalhada"])
            
            with tab1:
                # Seletor de categoria para anÃ¡lise
                categoria = st.selectbox(
                    "Selecione a categoria para anÃ¡lise",
                    colunas_analise
                )
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # GrÃ¡fico de barras - Faturamento
                    dados_fat = dados_filtrados.groupby(categoria)['preco'].sum().reset_index()
                    fig_fat = px.bar(
                        dados_fat,
                        x=categoria,
                        y='preco',
                        title=f'Faturamento por {categoria}',
                        labels={'preco': 'Faturamento (R$)'}
                    )
                    st.plotly_chart(fig_fat, use_container_width=True)
                
                with col2:
                    # GrÃ¡fico de pizza - Quantidade de pedidos
                    fig_qtd = px.pie(
                        dados_filtrados,
                        names=categoria,
                        title=f'DistribuiÃ§Ã£o de Pedidos por {categoria}'
                    )
                    st.plotly_chart(fig_qtd, use_container_width=True)
            
            with tab2:
                # AnÃ¡lise temporal
                dados_temporais = dados_filtrados.groupby('ano_mes')['preco'].sum().reset_index()
                fig_temporal = px.line(
                    dados_temporais,
                    x='ano_mes',
                    y='preco',
                    title='EvoluÃ§Ã£o do Faturamento por MÃªs',
                    labels={'preco': 'Faturamento (R$)', 'ano_mes': 'PerÃ­odo'}
                )
                st.plotly_chart(fig_temporal, use_container_width=True)
                
                # Preparando dados para o heatmap
                dados_filtrados.loc[:, 'dia_semana'] = dados_filtrados['data'].dt.day_name()
                dados_filtrados.loc[:, 'hora'] = dados_filtrados['data'].dt.hour
                
                vendas_hora_dia = dados_filtrados.pivot_table(
                    values='preco',
                    index='dia_semana',
                    columns='hora',
                    aggfunc='sum'
                )
                
                fig_heatmap = px.imshow(
                    vendas_hora_dia,
                    title='Mapa de Calor: Vendas por Dia e Hora',
                    labels=dict(x='Hora do Dia', y='Dia da Semana', color='Faturamento')
                )
                st.plotly_chart(fig_heatmap, use_container_width=True)
            
            with tab3:
                # AnÃ¡lise detalhada
                st.subheader("Dados Detalhados")
                
                # Agrupamento por mÃºltiplas dimensÃµes
                grouped_data = dados_filtrados.groupby(
                    ['regiao', 'estado', 'cidade', 'loja']
                ).agg({
                    'id_pedido': 'count',
                    'preco': ['sum', 'mean']
                }).round(2)
                
                grouped_data.columns = ['Quantidade de Pedidos', 'Faturamento Total', 'Ticket MÃ©dio']
                grouped_data = grouped_data.reset_index()
                
                st.dataframe(
                    grouped_data,
                    hide_index=True,
                    column_config={
                        'Faturamento Total': st.column_config.NumberColumn(
                            'Faturamento Total',
                            format="R$ %.2f"
                        ),
                        'Ticket MÃ©dio': st.column_config.NumberColumn(
                            'Ticket MÃ©dio',
                            format="R$ %.2f"
                        )
                    }
                )
                
                # OpÃ§Ã£o para download dos dados
                st.download_button(
                    label="Download dos dados analisados",
                    data=grouped_data.to_csv(index=False),
                    file_name="analise_detalhada.csv",
                    mime="text/csv"
                )
    
    except Exception as e:
        st.error(f"Erro ao processar o arquivo: {str(e)}")
else:
    # Mensagem inicial
    st.info("ğŸ‘ˆ Por favor, faÃ§a o upload de um arquivo Excel na barra lateral para comeÃ§ar a anÃ¡lise.")
    
    # Exemplo do formato esperado
    st.header("Formato esperado do arquivo Excel:")
    exemplo_df = pd.DataFrame({
        'id_pedido': [1, 2],
        'data': ['2024-01-01', '2024-01-02'],
        'loja': ['Loja A', 'Loja B'],
        'cidade': ['SÃ£o Paulo', 'Rio de Janeiro'],
        'estado': ['SP', 'RJ'],
        'regiao': ['Sudeste', 'Sudeste'],
        'tamanho': ['Grande', 'MÃ©dio'],
        'local_consumo': ['Local', 'Delivery'],
        'preco': [100.0, 150.0],
        'forma_pagamento': ['CartÃ£o', 'Dinheiro'],
        'ano_mes': ['2024-01', '2024-01']
    })
    st.dataframe(exemplo_df)